// Code generated by MockGen. DO NOT EDIT.
// Source: loans_update.go
//
// Generated by this command:
//
//	mockgen -source=loans_update.go -destination=./mocks/loans_update_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/Leon180/go-event-driven-microservices/internal/services/loans/internal/loans/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockUpdateLoanByID is a mock of UpdateLoanByID interface.
type MockUpdateLoanByID struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateLoanByIDMockRecorder
	isgomock struct{}
}

// MockUpdateLoanByIDMockRecorder is the mock recorder for MockUpdateLoanByID.
type MockUpdateLoanByIDMockRecorder struct {
	mock *MockUpdateLoanByID
}

// NewMockUpdateLoanByID creates a new mock instance.
func NewMockUpdateLoanByID(ctrl *gomock.Controller) *MockUpdateLoanByID {
	mock := &MockUpdateLoanByID{ctrl: ctrl}
	mock.recorder = &MockUpdateLoanByIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateLoanByID) EXPECT() *MockUpdateLoanByIDMockRecorder {
	return m.recorder
}

// UpdateLoanByID mocks base method.
func (m *MockUpdateLoanByID) UpdateLoanByID(ctx context.Context, update entities.UpdateLoan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoanByID", ctx, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLoanByID indicates an expected call of UpdateLoanByID.
func (mr *MockUpdateLoanByIDMockRecorder) UpdateLoanByID(ctx, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoanByID", reflect.TypeOf((*MockUpdateLoanByID)(nil).UpdateLoanByID), ctx, update)
}
