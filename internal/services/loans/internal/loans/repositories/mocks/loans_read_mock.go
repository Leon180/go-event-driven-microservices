// Code generated by MockGen. DO NOT EDIT.
// Source: loans_read.go
//
// Generated by this command:
//
//	mockgen -source=loans_read.go -destination=mocks/loans_read_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/Leon180/go-event-driven-microservices/internal/services/loans/internal/loans/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockReadLoanByMobileNumberAndActiveSwitch is a mock of ReadLoanByMobileNumberAndActiveSwitch interface.
type MockReadLoanByMobileNumberAndActiveSwitch struct {
	ctrl     *gomock.Controller
	recorder *MockReadLoanByMobileNumberAndActiveSwitchMockRecorder
	isgomock struct{}
}

// MockReadLoanByMobileNumberAndActiveSwitchMockRecorder is the mock recorder for MockReadLoanByMobileNumberAndActiveSwitch.
type MockReadLoanByMobileNumberAndActiveSwitchMockRecorder struct {
	mock *MockReadLoanByMobileNumberAndActiveSwitch
}

// NewMockReadLoanByMobileNumberAndActiveSwitch creates a new mock instance.
func NewMockReadLoanByMobileNumberAndActiveSwitch(ctrl *gomock.Controller) *MockReadLoanByMobileNumberAndActiveSwitch {
	mock := &MockReadLoanByMobileNumberAndActiveSwitch{ctrl: ctrl}
	mock.recorder = &MockReadLoanByMobileNumberAndActiveSwitchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadLoanByMobileNumberAndActiveSwitch) EXPECT() *MockReadLoanByMobileNumberAndActiveSwitchMockRecorder {
	return m.recorder
}

// ReadLoanByMobileNumberAndActiveSwitch mocks base method.
func (m *MockReadLoanByMobileNumberAndActiveSwitch) ReadLoanByMobileNumberAndActiveSwitch(ctx context.Context, mobileNumber string, activeSwitch *bool) (entities.Loans, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLoanByMobileNumberAndActiveSwitch", ctx, mobileNumber, activeSwitch)
	ret0, _ := ret[0].(entities.Loans)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLoanByMobileNumberAndActiveSwitch indicates an expected call of ReadLoanByMobileNumberAndActiveSwitch.
func (mr *MockReadLoanByMobileNumberAndActiveSwitchMockRecorder) ReadLoanByMobileNumberAndActiveSwitch(ctx, mobileNumber, activeSwitch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLoanByMobileNumberAndActiveSwitch", reflect.TypeOf((*MockReadLoanByMobileNumberAndActiveSwitch)(nil).ReadLoanByMobileNumberAndActiveSwitch), ctx, mobileNumber, activeSwitch)
}

// MockReadLoan is a mock of ReadLoan interface.
type MockReadLoan struct {
	ctrl     *gomock.Controller
	recorder *MockReadLoanMockRecorder
	isgomock struct{}
}

// MockReadLoanMockRecorder is the mock recorder for MockReadLoan.
type MockReadLoanMockRecorder struct {
	mock *MockReadLoan
}

// NewMockReadLoan creates a new mock instance.
func NewMockReadLoan(ctrl *gomock.Controller) *MockReadLoan {
	mock := &MockReadLoan{ctrl: ctrl}
	mock.recorder = &MockReadLoanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadLoan) EXPECT() *MockReadLoanMockRecorder {
	return m.recorder
}

// ReadLoan mocks base method.
func (m *MockReadLoan) ReadLoan(ctx context.Context, id string) (*entities.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLoan", ctx, id)
	ret0, _ := ret[0].(*entities.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLoan indicates an expected call of ReadLoan.
func (mr *MockReadLoanMockRecorder) ReadLoan(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLoan", reflect.TypeOf((*MockReadLoan)(nil).ReadLoan), ctx, id)
}
