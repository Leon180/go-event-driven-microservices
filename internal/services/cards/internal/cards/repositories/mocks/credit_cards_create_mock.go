// Code generated by MockGen. DO NOT EDIT.
// Source: credit_cards_create.go
//
// Generated by this command:
//
//	mockgen -source=credit_cards_create.go -destination=mocks/credit_cards_create_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/Leon180/go-event-driven-microservices/internal/services/cards/internal/cards/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockCreateCreditCard is a mock of CreateCreditCard interface.
type MockCreateCreditCard struct {
	ctrl     *gomock.Controller
	recorder *MockCreateCreditCardMockRecorder
	isgomock struct{}
}

// MockCreateCreditCardMockRecorder is the mock recorder for MockCreateCreditCard.
type MockCreateCreditCardMockRecorder struct {
	mock *MockCreateCreditCard
}

// NewMockCreateCreditCard creates a new mock instance.
func NewMockCreateCreditCard(ctrl *gomock.Controller) *MockCreateCreditCard {
	mock := &MockCreateCreditCard{ctrl: ctrl}
	mock.recorder = &MockCreateCreditCardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateCreditCard) EXPECT() *MockCreateCreditCardMockRecorder {
	return m.recorder
}

// CreateCreditCard mocks base method.
func (m *MockCreateCreditCard) CreateCreditCard(ctx context.Context, card *entities.CreditCard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCreditCard", ctx, card)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCreditCard indicates an expected call of CreateCreditCard.
func (mr *MockCreateCreditCardMockRecorder) CreateCreditCard(ctx, card any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCreditCard", reflect.TypeOf((*MockCreateCreditCard)(nil).CreateCreditCard), ctx, card)
}

// MockCreateCreditCards is a mock of CreateCreditCards interface.
type MockCreateCreditCards struct {
	ctrl     *gomock.Controller
	recorder *MockCreateCreditCardsMockRecorder
	isgomock struct{}
}

// MockCreateCreditCardsMockRecorder is the mock recorder for MockCreateCreditCards.
type MockCreateCreditCardsMockRecorder struct {
	mock *MockCreateCreditCards
}

// NewMockCreateCreditCards creates a new mock instance.
func NewMockCreateCreditCards(ctrl *gomock.Controller) *MockCreateCreditCards {
	mock := &MockCreateCreditCards{ctrl: ctrl}
	mock.recorder = &MockCreateCreditCardsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateCreditCards) EXPECT() *MockCreateCreditCardsMockRecorder {
	return m.recorder
}

// CreateCreditCards mocks base method.
func (m *MockCreateCreditCards) CreateCreditCards(ctx context.Context, cards entities.CreditCards) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCreditCards", ctx, cards)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCreditCards indicates an expected call of CreateCreditCards.
func (mr *MockCreateCreditCardsMockRecorder) CreateCreditCards(ctx, cards any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCreditCards", reflect.TypeOf((*MockCreateCreditCards)(nil).CreateCreditCards), ctx, cards)
}
