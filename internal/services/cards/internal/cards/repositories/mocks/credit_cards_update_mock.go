// Code generated by MockGen. DO NOT EDIT.
// Source: credit_cards_update.go
//
// Generated by this command:
//
//	mockgen -source=credit_cards_update.go -destination=./mocks/credit_cards_update_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/Leon180/go-event-driven-microservices/internal/services/cards/internal/cards/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockUpdateCreditCardByID is a mock of UpdateCreditCardByID interface.
type MockUpdateCreditCardByID struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateCreditCardByIDMockRecorder
	isgomock struct{}
}

// MockUpdateCreditCardByIDMockRecorder is the mock recorder for MockUpdateCreditCardByID.
type MockUpdateCreditCardByIDMockRecorder struct {
	mock *MockUpdateCreditCardByID
}

// NewMockUpdateCreditCardByID creates a new mock instance.
func NewMockUpdateCreditCardByID(ctrl *gomock.Controller) *MockUpdateCreditCardByID {
	mock := &MockUpdateCreditCardByID{ctrl: ctrl}
	mock.recorder = &MockUpdateCreditCardByIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateCreditCardByID) EXPECT() *MockUpdateCreditCardByIDMockRecorder {
	return m.recorder
}

// UpdateCreditCardByID mocks base method.
func (m *MockUpdateCreditCardByID) UpdateCreditCardByID(ctx context.Context, update entities.UpdateCreditCard) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCreditCardByID", ctx, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCreditCardByID indicates an expected call of UpdateCreditCardByID.
func (mr *MockUpdateCreditCardByIDMockRecorder) UpdateCreditCardByID(ctx, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCreditCardByID", reflect.TypeOf((*MockUpdateCreditCardByID)(nil).UpdateCreditCardByID), ctx, update)
}
