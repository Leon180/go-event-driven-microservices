// Code generated by MockGen. DO NOT EDIT.
// Source: accounts_create.go
//
// Generated by this command:
//
//	mockgen -source=accounts_create.go -destination=./mocks/accounts_create_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/Leon180/go-event-driven-microservices/internal/services/accounts/internal/accounts/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockCreateAccount is a mock of CreateAccount interface.
type MockCreateAccount struct {
	ctrl     *gomock.Controller
	recorder *MockCreateAccountMockRecorder
	isgomock struct{}
}

// MockCreateAccountMockRecorder is the mock recorder for MockCreateAccount.
type MockCreateAccountMockRecorder struct {
	mock *MockCreateAccount
}

// NewMockCreateAccount creates a new mock instance.
func NewMockCreateAccount(ctrl *gomock.Controller) *MockCreateAccount {
	mock := &MockCreateAccount{ctrl: ctrl}
	mock.recorder = &MockCreateAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateAccount) EXPECT() *MockCreateAccountMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockCreateAccount) CreateAccount(ctx context.Context, account entities.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockCreateAccountMockRecorder) CreateAccount(ctx, account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockCreateAccount)(nil).CreateAccount), ctx, account)
}

// MockCreateAccounts is a mock of CreateAccounts interface.
type MockCreateAccounts struct {
	ctrl     *gomock.Controller
	recorder *MockCreateAccountsMockRecorder
	isgomock struct{}
}

// MockCreateAccountsMockRecorder is the mock recorder for MockCreateAccounts.
type MockCreateAccountsMockRecorder struct {
	mock *MockCreateAccounts
}

// NewMockCreateAccounts creates a new mock instance.
func NewMockCreateAccounts(ctrl *gomock.Controller) *MockCreateAccounts {
	mock := &MockCreateAccounts{ctrl: ctrl}
	mock.recorder = &MockCreateAccountsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateAccounts) EXPECT() *MockCreateAccountsMockRecorder {
	return m.recorder
}

// CreateAccounts mocks base method.
func (m *MockCreateAccounts) CreateAccounts(ctx context.Context, accounts entities.Accounts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccounts", ctx, accounts)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccounts indicates an expected call of CreateAccounts.
func (mr *MockCreateAccountsMockRecorder) CreateAccounts(ctx, accounts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccounts", reflect.TypeOf((*MockCreateAccounts)(nil).CreateAccounts), ctx, accounts)
}
