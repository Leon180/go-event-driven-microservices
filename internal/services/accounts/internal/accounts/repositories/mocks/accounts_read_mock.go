// Code generated by MockGen. DO NOT EDIT.
// Source: accounts_read.go
//
// Generated by this command:
//
//	mockgen -source=accounts_read.go -destination=./mocks/accounts_read_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	accounts "github.com/Leon180/go-event-driven-microservices/internal/pkg/enums/accounts"
	entities "github.com/Leon180/go-event-driven-microservices/internal/services/accounts/internal/accounts/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockReadAccountsByMobileNumber is a mock of ReadAccountsByMobileNumber interface.
type MockReadAccountsByMobileNumber struct {
	ctrl     *gomock.Controller
	recorder *MockReadAccountsByMobileNumberMockRecorder
	isgomock struct{}
}

// MockReadAccountsByMobileNumberMockRecorder is the mock recorder for MockReadAccountsByMobileNumber.
type MockReadAccountsByMobileNumberMockRecorder struct {
	mock *MockReadAccountsByMobileNumber
}

// NewMockReadAccountsByMobileNumber creates a new mock instance.
func NewMockReadAccountsByMobileNumber(ctrl *gomock.Controller) *MockReadAccountsByMobileNumber {
	mock := &MockReadAccountsByMobileNumber{ctrl: ctrl}
	mock.recorder = &MockReadAccountsByMobileNumberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadAccountsByMobileNumber) EXPECT() *MockReadAccountsByMobileNumberMockRecorder {
	return m.recorder
}

// ReadAccountsByMobileNumber mocks base method.
func (m *MockReadAccountsByMobileNumber) ReadAccountsByMobileNumber(ctx context.Context, mobileNumber string) (entities.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAccountsByMobileNumber", ctx, mobileNumber)
	ret0, _ := ret[0].(entities.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAccountsByMobileNumber indicates an expected call of ReadAccountsByMobileNumber.
func (mr *MockReadAccountsByMobileNumberMockRecorder) ReadAccountsByMobileNumber(ctx, mobileNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAccountsByMobileNumber", reflect.TypeOf((*MockReadAccountsByMobileNumber)(nil).ReadAccountsByMobileNumber), ctx, mobileNumber)
}

// MockReadAccountByMobileNumberAndAccountType is a mock of ReadAccountByMobileNumberAndAccountType interface.
type MockReadAccountByMobileNumberAndAccountType struct {
	ctrl     *gomock.Controller
	recorder *MockReadAccountByMobileNumberAndAccountTypeMockRecorder
	isgomock struct{}
}

// MockReadAccountByMobileNumberAndAccountTypeMockRecorder is the mock recorder for MockReadAccountByMobileNumberAndAccountType.
type MockReadAccountByMobileNumberAndAccountTypeMockRecorder struct {
	mock *MockReadAccountByMobileNumberAndAccountType
}

// NewMockReadAccountByMobileNumberAndAccountType creates a new mock instance.
func NewMockReadAccountByMobileNumberAndAccountType(ctrl *gomock.Controller) *MockReadAccountByMobileNumberAndAccountType {
	mock := &MockReadAccountByMobileNumberAndAccountType{ctrl: ctrl}
	mock.recorder = &MockReadAccountByMobileNumberAndAccountTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadAccountByMobileNumberAndAccountType) EXPECT() *MockReadAccountByMobileNumberAndAccountTypeMockRecorder {
	return m.recorder
}

// ReadAccountByMobileNumberAndAccountType mocks base method.
func (m *MockReadAccountByMobileNumberAndAccountType) ReadAccountByMobileNumberAndAccountType(ctx context.Context, mobileNumber string, accountTypeCode accounts.AccountTypeCode) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAccountByMobileNumberAndAccountType", ctx, mobileNumber, accountTypeCode)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAccountByMobileNumberAndAccountType indicates an expected call of ReadAccountByMobileNumberAndAccountType.
func (mr *MockReadAccountByMobileNumberAndAccountTypeMockRecorder) ReadAccountByMobileNumberAndAccountType(ctx, mobileNumber, accountTypeCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAccountByMobileNumberAndAccountType", reflect.TypeOf((*MockReadAccountByMobileNumberAndAccountType)(nil).ReadAccountByMobileNumberAndAccountType), ctx, mobileNumber, accountTypeCode)
}

// MockReadAccount is a mock of ReadAccount interface.
type MockReadAccount struct {
	ctrl     *gomock.Controller
	recorder *MockReadAccountMockRecorder
	isgomock struct{}
}

// MockReadAccountMockRecorder is the mock recorder for MockReadAccount.
type MockReadAccountMockRecorder struct {
	mock *MockReadAccount
}

// NewMockReadAccount creates a new mock instance.
func NewMockReadAccount(ctrl *gomock.Controller) *MockReadAccount {
	mock := &MockReadAccount{ctrl: ctrl}
	mock.recorder = &MockReadAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadAccount) EXPECT() *MockReadAccountMockRecorder {
	return m.recorder
}

// ReadAccount mocks base method.
func (m *MockReadAccount) ReadAccount(ctx context.Context, id string) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAccount", ctx, id)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAccount indicates an expected call of ReadAccount.
func (mr *MockReadAccountMockRecorder) ReadAccount(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAccount", reflect.TypeOf((*MockReadAccount)(nil).ReadAccount), ctx, id)
}
