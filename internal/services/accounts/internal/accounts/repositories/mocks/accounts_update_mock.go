// Code generated by MockGen. DO NOT EDIT.
// Source: accounts_update.go
//
// Generated by this command:
//
//	mockgen -source=accounts_update.go -destination=./mocks/accounts_update_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/Leon180/go-event-driven-microservices/internal/services/accounts/internal/accounts/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockUpdateAccountByID is a mock of UpdateAccountByID interface.
type MockUpdateAccountByID struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateAccountByIDMockRecorder
	isgomock struct{}
}

// MockUpdateAccountByIDMockRecorder is the mock recorder for MockUpdateAccountByID.
type MockUpdateAccountByIDMockRecorder struct {
	mock *MockUpdateAccountByID
}

// NewMockUpdateAccountByID creates a new mock instance.
func NewMockUpdateAccountByID(ctrl *gomock.Controller) *MockUpdateAccountByID {
	mock := &MockUpdateAccountByID{ctrl: ctrl}
	mock.recorder = &MockUpdateAccountByIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateAccountByID) EXPECT() *MockUpdateAccountByIDMockRecorder {
	return m.recorder
}

// UpdateAccountByID mocks base method.
func (m *MockUpdateAccountByID) UpdateAccountByID(ctx context.Context, update entities.UpdateAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountByID", ctx, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountByID indicates an expected call of UpdateAccountByID.
func (mr *MockUpdateAccountByIDMockRecorder) UpdateAccountByID(ctx, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountByID", reflect.TypeOf((*MockUpdateAccountByID)(nil).UpdateAccountByID), ctx, update)
}
