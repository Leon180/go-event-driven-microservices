// Code generated by MockGen. DO NOT EDIT.
// Source: customers_read.go
//
// Generated by this command:
//
//	mockgen -source=customers_read.go -destination=mocks/customers_read_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/Leon180/go-event-driven-microservices/internal/services/customers/internal/customers/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockReadCustomerByMobileNumberAndActiveSwitch is a mock of ReadCustomerByMobileNumberAndActiveSwitch interface.
type MockReadCustomerByMobileNumberAndActiveSwitch struct {
	ctrl     *gomock.Controller
	recorder *MockReadCustomerByMobileNumberAndActiveSwitchMockRecorder
	isgomock struct{}
}

// MockReadCustomerByMobileNumberAndActiveSwitchMockRecorder is the mock recorder for MockReadCustomerByMobileNumberAndActiveSwitch.
type MockReadCustomerByMobileNumberAndActiveSwitchMockRecorder struct {
	mock *MockReadCustomerByMobileNumberAndActiveSwitch
}

// NewMockReadCustomerByMobileNumberAndActiveSwitch creates a new mock instance.
func NewMockReadCustomerByMobileNumberAndActiveSwitch(ctrl *gomock.Controller) *MockReadCustomerByMobileNumberAndActiveSwitch {
	mock := &MockReadCustomerByMobileNumberAndActiveSwitch{ctrl: ctrl}
	mock.recorder = &MockReadCustomerByMobileNumberAndActiveSwitchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadCustomerByMobileNumberAndActiveSwitch) EXPECT() *MockReadCustomerByMobileNumberAndActiveSwitchMockRecorder {
	return m.recorder
}

// ReadCustomerByMobileNumberAndActiveSwitch mocks base method.
func (m *MockReadCustomerByMobileNumberAndActiveSwitch) ReadCustomerByMobileNumberAndActiveSwitch(ctx context.Context, mobileNumber string, activeSwitch *bool) (entities.Customers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCustomerByMobileNumberAndActiveSwitch", ctx, mobileNumber, activeSwitch)
	ret0, _ := ret[0].(entities.Customers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCustomerByMobileNumberAndActiveSwitch indicates an expected call of ReadCustomerByMobileNumberAndActiveSwitch.
func (mr *MockReadCustomerByMobileNumberAndActiveSwitchMockRecorder) ReadCustomerByMobileNumberAndActiveSwitch(ctx, mobileNumber, activeSwitch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCustomerByMobileNumberAndActiveSwitch", reflect.TypeOf((*MockReadCustomerByMobileNumberAndActiveSwitch)(nil).ReadCustomerByMobileNumberAndActiveSwitch), ctx, mobileNumber, activeSwitch)
}

// MockReadCustomer is a mock of ReadCustomer interface.
type MockReadCustomer struct {
	ctrl     *gomock.Controller
	recorder *MockReadCustomerMockRecorder
	isgomock struct{}
}

// MockReadCustomerMockRecorder is the mock recorder for MockReadCustomer.
type MockReadCustomerMockRecorder struct {
	mock *MockReadCustomer
}

// NewMockReadCustomer creates a new mock instance.
func NewMockReadCustomer(ctrl *gomock.Controller) *MockReadCustomer {
	mock := &MockReadCustomer{ctrl: ctrl}
	mock.recorder = &MockReadCustomerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadCustomer) EXPECT() *MockReadCustomerMockRecorder {
	return m.recorder
}

// ReadCustomer mocks base method.
func (m *MockReadCustomer) ReadCustomer(ctx context.Context, id string) (*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCustomer", ctx, id)
	ret0, _ := ret[0].(*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCustomer indicates an expected call of ReadCustomer.
func (mr *MockReadCustomerMockRecorder) ReadCustomer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCustomer", reflect.TypeOf((*MockReadCustomer)(nil).ReadCustomer), ctx, id)
}
