// Code generated by MockGen. DO NOT EDIT.
// Source: customers_create.go
//
// Generated by this command:
//
//	mockgen -source=customers_create.go -destination=mocks/customers_create_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/Leon180/go-event-driven-microservices/internal/services/customers/internal/customers/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockCreateCustomer is a mock of CreateCustomer interface.
type MockCreateCustomer struct {
	ctrl     *gomock.Controller
	recorder *MockCreateCustomerMockRecorder
	isgomock struct{}
}

// MockCreateCustomerMockRecorder is the mock recorder for MockCreateCustomer.
type MockCreateCustomerMockRecorder struct {
	mock *MockCreateCustomer
}

// NewMockCreateCustomer creates a new mock instance.
func NewMockCreateCustomer(ctrl *gomock.Controller) *MockCreateCustomer {
	mock := &MockCreateCustomer{ctrl: ctrl}
	mock.recorder = &MockCreateCustomerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateCustomer) EXPECT() *MockCreateCustomerMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockCreateCustomer) CreateCustomer(ctx context.Context, customer *entities.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", ctx, customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockCreateCustomerMockRecorder) CreateCustomer(ctx, customer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockCreateCustomer)(nil).CreateCustomer), ctx, customer)
}

// MockCreateCustomers is a mock of CreateCustomers interface.
type MockCreateCustomers struct {
	ctrl     *gomock.Controller
	recorder *MockCreateCustomersMockRecorder
	isgomock struct{}
}

// MockCreateCustomersMockRecorder is the mock recorder for MockCreateCustomers.
type MockCreateCustomersMockRecorder struct {
	mock *MockCreateCustomers
}

// NewMockCreateCustomers creates a new mock instance.
func NewMockCreateCustomers(ctrl *gomock.Controller) *MockCreateCustomers {
	mock := &MockCreateCustomers{ctrl: ctrl}
	mock.recorder = &MockCreateCustomersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateCustomers) EXPECT() *MockCreateCustomersMockRecorder {
	return m.recorder
}

// CreateCustomers mocks base method.
func (m *MockCreateCustomers) CreateCustomers(ctx context.Context, customers entities.Customers) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomers", ctx, customers)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomers indicates an expected call of CreateCustomers.
func (mr *MockCreateCustomersMockRecorder) CreateCustomers(ctx, customers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomers", reflect.TypeOf((*MockCreateCustomers)(nil).CreateCustomers), ctx, customers)
}
